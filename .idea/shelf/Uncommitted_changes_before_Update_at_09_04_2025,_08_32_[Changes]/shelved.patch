Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"/>\n    <application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.CryptInfos\"\n        tools:targetApi=\"31\"\n        android:usesCleartextTraffic=\"true\">\n        <activity\n            android:name=\".HomeActivity\"\n            android:exported=\"true\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n\n        <activity android:name=\".CryptoActivity\" />\n\n\n\n    </application>\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 6751c20f42b674df8cda6555ecd5458932e28827)
+++ b/app/src/main/AndroidManifest.xml	(date 1743750261577)
@@ -15,7 +15,7 @@
         tools:targetApi="31"
         android:usesCleartextTraffic="true">
         <activity
-            android:name=".HomeActivity"
+            android:name=".ExchangeActivity"
             android:exported="true">
             <intent-filter>
                 <action android:name="android.intent.action.MAIN" />
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id(\"com.android.application\") // Doit être présent en premier\n    kotlin(\"android\") // Ensuite, le plugin Kotlin Android\n}\n\nandroid {\n    namespace = \"com.example.cryptinfos\"\n    compileSdk = 35\n\n    defaultConfig {\n        applicationId = \"com.example.cryptinfos\"\n        minSdk = 30\n        targetSdk = 35\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n}\n\ndependencies {\n    implementation(\"com.github.PhilJay:MPAndroidChart:3.1.0\")\n    implementation(libs.appcompat)\n    implementation(libs.material)\n    implementation(libs.activity)\n    implementation(libs.constraintlayout)\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.ext.junit)\n    androidTestImplementation(libs.espresso.core)\n    implementation(libs.glide)\n    annotationProcessor(libs.glideCompiler)\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 6751c20f42b674df8cda6555ecd5458932e28827)
+++ b/app/build.gradle.kts	(date 1743753224716)
@@ -33,6 +33,7 @@
 }
 
 dependencies {
+    implementation ("com.google.android.material:material:1.6.0")
     implementation("com.github.PhilJay:MPAndroidChart:3.1.0")
     implementation(libs.appcompat)
     implementation(libs.material)
Index: app/src/main/java/com/example/cryptinfos/ExchangeActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/cryptinfos/ExchangeActivity.java b/app/src/main/java/com/example/cryptinfos/ExchangeActivity.java
new file mode 100644
--- /dev/null	(date 1744180254708)
+++ b/app/src/main/java/com/example/cryptinfos/ExchangeActivity.java	(date 1744180254708)
@@ -0,0 +1,228 @@
+package com.example.cryptinfos;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.text.Editable;
+import android.text.TextWatcher;
+import android.view.View;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.AutoCompleteTextView;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.appcompat.widget.Toolbar;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Locale;
+import java.util.Map;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+public class ExchangeActivity extends AppCompatActivity {
+
+    private Map<String, Double> coinsMap;
+    private AutoCompleteTextView spinner1;
+    private AutoCompleteTextView spinner2;
+    private EditText edt1;
+    private TextView edt2;
+
+    private Button btn;
+
+    private final Handler handler = new Handler(Looper.getMainLooper());
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.exchange_layout);
+
+        spinner1 = findViewById(R.id.spinner1);
+        spinner2 = findViewById(R.id.spinner2);
+        edt1 = findViewById(R.id.editTextNumber1);
+        edt2 = findViewById(R.id.editTextNumber2);
+        btn = findViewById(R.id.switchButton);
+
+        Toolbar toolbar = findViewById(R.id.toolbar);
+        setSupportActionBar(toolbar);
+
+        Intent i = getIntent();
+
+        loadCoins();
+
+        // Mise à jour de la conversion dès que le texte change
+        edt1.addTextChangedListener(new TextWatcher() {
+            @Override
+            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
+                // Rien
+            }
+            @Override
+            public void onTextChanged(CharSequence s, int start, int before, int count) {
+                convert();
+            }
+            @Override
+            public void afterTextChanged(Editable s) {
+                // Rien
+            }
+        });
+
+        // Mise à jour lors du changement de sélection dans les spinners
+        AdapterView.OnItemSelectedListener selectionListener = new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                convert();
+            }
+            @Override
+            public void onNothingSelected(AdapterView<?> parent) {
+                // Rien
+            }
+        };
+        spinner1.setOnItemSelectedListener(selectionListener);
+        spinner2.setOnItemSelectedListener(selectionListener);
+    }
+
+    public void loadCoins() {
+        ExecutorService executor = Executors.newSingleThreadExecutor();
+        Handler handler = new Handler(Looper.getMainLooper());
+
+        executor.execute(new Runnable() {
+            @Override
+            public void run() {
+                // Appel de l'API pour récupérer la liste des coins (ici limité à 200)
+                String data = getDataFromHTTP("https://openapiv1.coinstats.app/coins?limit=200",
+                        "srkjExa1IBZMMoDmd5YTI4sWbLpce8KFavfrzjbKKvU=");
+                handler.post(new Runnable() {
+                    @Override
+                    public void run() {
+                        try {
+                            // Décodage du JSON pour obtenir un dictionnaire associant le nom de la crypto à son prix
+                            coinsMap = decodeJsonForCoinNames(data);
+                            // Extraction et tri de la liste des noms de crypto
+                            List<String> coinNames = new ArrayList<>(coinsMap.keySet());
+                            Collections.sort(coinNames);
+                            // Création d'un ArrayAdapter pour alimenter les spinners
+                            ArrayAdapter<String> adapter = new ArrayAdapter<>(ExchangeActivity.this,
+                                    android.R.layout.simple_spinner_item, coinNames);
+                            adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+                            spinner1.setAdapter(adapter);
+                            spinner2.setAdapter(adapter);
+                        } catch (Exception e) {
+                            Toast.makeText(ExchangeActivity.this, "Erreur lors du chargement des coins", Toast.LENGTH_LONG).show();
+                            e.printStackTrace();
+                        }
+                    }
+                });
+            }
+        });
+    }
+
+
+    public Map<String, Double> decodeJsonForCoinNames(String json) {
+        Map<String, Double> coinMap = new HashMap<>();
+        try {
+            JSONObject obj = new JSONObject(json);
+            JSONArray resultArray = obj.getJSONArray("result");
+            for (int i = 0; i < resultArray.length(); i++) {
+                JSONObject coinObj = resultArray.getJSONObject(i);
+                String coinName = coinObj.getString("name");
+                double price = coinObj.getDouble("price");
+                coinMap.put(coinName, price);
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+        return coinMap;
+    }
+
+    public String getDataFromHTTP(String param, String apiKey) {
+        StringBuilder result = new StringBuilder();
+        HttpURLConnection connexion = null;
+        try {
+            // Création de l'URL
+            URL url = new URL(param);
+            connexion = (HttpURLConnection) url.openConnection();
+
+            // Définition de la méthode GET
+            connexion.setRequestMethod("GET");
+
+            // Ajout des en-têtes (API key et accept: application/json)
+            connexion.setRequestProperty("X-API-KEY", apiKey);
+            connexion.setRequestProperty("accept", "application/json");
+
+            // Lecture de la réponse
+            InputStream inputStream = connexion.getInputStream();
+            InputStreamReader inputStreamReader = new InputStreamReader(inputStream);
+            BufferedReader bf = new BufferedReader(inputStreamReader);
+
+            String ligne;
+            while ((ligne = bf.readLine()) != null) {
+                result.append(ligne);
+            }
+
+            // Fermeture des flux
+            inputStream.close();
+            bf.close();
+
+            // Déconnexion de la connexion
+            connexion.disconnect();
+        } catch (Exception e) {
+            // En cas d'erreur, renvoie un message d'erreur
+            result = new StringBuilder("Erreur lors de la récupération des données");
+            e.printStackTrace();
+        }
+        return result.toString();
+    }
+
+    /**
+     * Convertit le montant saisi (en unité de la première crypto) en l'équivalent dans la deuxième crypto.
+     * La conversion se fait en multipliant le montant par le prix de la première crypto puis en le divisant par le prix de la deuxième crypto.
+     */
+    private void convert() {
+        String input = edt1.getText().toString();
+        if (input.isEmpty()) {
+            edt2.setText("");
+            return;
+        }
+        try {
+            double amount = Double.parseDouble(input);
+            // Récupération des noms sélectionnés
+            String coinName1 = spinner1.getText().toString();
+            String coinName2 = spinner2.getText().toString();
+            Double price1 = coinsMap.get(coinName1);
+            Double price2 = coinsMap.get(coinName2);
+            if (price1 != null && price2 != null && price2 != 0) {
+                double result = (amount * price1) / price2;
+                edt2.setText(String.format(Locale.getDefault(), "%.6f", result));
+            }
+        } catch (Exception e) {
+            edt2.setText("Erreur");
+            e.printStackTrace();
+        }
+    }
+
+    public void switchCrypto(View v){
+        String coin1 = spinner1.getText().toString();
+        String coin2 = spinner2.getText().toString();
+
+        spinner1.setText(coin2, false);
+        spinner2.setText(coin1, false);
+
+        convert();
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/exchange_layout.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/exchange_layout.xml b/app/src/main/res/layout/exchange_layout.xml
new file mode 100644
--- /dev/null	(date 1744179945865)
+++ b/app/src/main/res/layout/exchange_layout.xml	(date 1744179945865)
@@ -0,0 +1,82 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:padding="16dp"
+    tools:context=".ExchangeActivity">
+
+    <include layout="@layout/toolbar" />
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginBottom="8dp">
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/textInputLayout1"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox.ExposedDropdownMenu"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:hint="Crypto">
+
+            <AutoCompleteTextView
+                android:id="@+id/spinner1"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:inputType="none" />
+        </com.google.android.material.textfield.TextInputLayout>
+
+
+        <EditText
+            android:id="@+id/editTextNumber1"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="8dp"
+            android:hint="Nombre"
+            android:inputType="number" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:orientation="horizontal"
+        android:layout_marginBottom="8dp"
+        >
+
+        <com.google.android.material.textfield.TextInputLayout
+            android:id="@+id/textInputLayout2"
+            style="@style/Widget.MaterialComponents.TextInputLayout.OutlinedBox.ExposedDropdownMenu"
+            android:layout_width="0dp"
+            android:layout_height="wrap_content"
+            android:layout_weight="1"
+            android:hint="Crypto">
+
+            <AutoCompleteTextView
+                android:id="@+id/spinner2"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:inputType="none" />
+        </com.google.android.material.textfield.TextInputLayout>
+
+
+        <TextView
+            android:id="@+id/editTextNumber2"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_marginStart="8dp"
+            android:hint="Nombre"
+            android:inputType="number" />
+    </LinearLayout>
+
+    <Button
+        android:id="@+id/switchButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:onClick="switchCrypto"/>
+
+</LinearLayout>
